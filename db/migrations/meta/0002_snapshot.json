{
  "id": "f4334204-6f73-477c-a07d-5aef137b0501",
  "prevId": "8a91de84-a7b0-4638-bbe3-eeeac0cc69aa",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.chat_shares": {
      "name": "chat_shares",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "chat_id": {
          "name": "chat_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "share_id": {
          "name": "share_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "CURRENT_TIMESTAMP"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "CURRENT_TIMESTAMP"
        },
        "messages": {
          "name": "messages",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "chat_shares_share_id_key": {
          "name": "chat_shares_share_id_key",
          "nullsNotDistinct": false,
          "columns": [
            "share_id"
          ]
        }
      },
      "policies": {
        "Authenticated users can create shares": {
          "name": "Authenticated users can create shares",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "authenticated"
          ],
          "withCheck": "true"
        },
        "Enable read access for all users": {
          "name": "Enable read access for all users",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.chats": {
      "name": "chats",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "text",
          "primaryKey": true,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "messages": {
          "name": "messages",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "auth.uid()"
        },
        "is_knowledge_base": {
          "name": "is_knowledge_base",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "knowledge_base_id": {
          "name": "knowledge_base_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can read their own chats": {
          "name": "Users can read their own chats",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Users can insert their own chats": {
          "name": "Users can insert their own chats",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Users can update their own chats": {
          "name": "Users can update their own chats",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Users can delete their own chats": {
          "name": "Users can delete their own chats",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.credits": {
      "name": "credits",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true,
          "default": "auth.uid()"
        },
        "balance": {
          "name": "balance",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "default": 0
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "credits_user_id_fkey": {
          "name": "credits_user_id_fkey",
          "tableFrom": "credits",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_user_credits": {
          "name": "unique_user_credits",
          "nullsNotDistinct": false,
          "columns": [
            "user_id"
          ]
        }
      },
      "policies": {
        "Users can update their own credits": {
          "name": "Users can update their own credits",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Users can view their own credits": {
          "name": "Users can view their own credits",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.document_chunks": {
      "name": "document_chunks",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "document_chunks_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "document_id": {
          "name": "document_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "auth.uid()"
        },
        "chunk": {
          "name": "chunk",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "embedding": {
          "name": "embedding",
          "type": "vector(3072)",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "is_knowledge_base": {
          "name": "is_knowledge_base",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can read their own active documents": {
          "name": "Users can read their own active documents",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "((auth.uid() = user_id) AND (active = true))"
        },
        "Users can delete their own documents": {
          "name": "Users can delete their own documents",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        },
        "Users can insert their own documents": {
          "name": "Users can insert their own documents",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        },
        "Users can update their own documents": {
          "name": "Users can update their own documents",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        },
        "Users can view their own documents": {
          "name": "Users can view their own documents",
          "as": "PERMISSIVE",
          "for": "ALL",
          "to": [
            "public"
          ]
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.documents": {
      "name": "documents",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "bigint",
          "primaryKey": true,
          "notNull": true,
          "identity": {
            "type": "byDefault",
            "name": "documents_id_seq",
            "schema": "public",
            "increment": "1",
            "startWith": "1",
            "minValue": "1",
            "maxValue": "9223372036854775807",
            "cache": "1",
            "cycle": false
          }
        },
        "title": {
          "name": "title",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "document_id": {
          "name": "document_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "url": {
          "name": "url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false,
          "default": "auth.uid()"
        },
        "document_name": {
          "name": "document_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_knowledge_base": {
          "name": "is_knowledge_base",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.embed_access_logs": {
      "name": "embed_access_logs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "knowledge_base_id": {
          "name": "knowledge_base_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "chat_id": {
          "name": "chat_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "referrer": {
          "name": "referrer",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "user_agent": {
          "name": "user_agent",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "ip_address": {
          "name": "ip_address",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "embed_access_logs_knowledge_base_id_knowledge_bases_id_fk": {
          "name": "embed_access_logs_knowledge_base_id_knowledge_bases_id_fk",
          "tableFrom": "embed_access_logs",
          "tableTo": "knowledge_bases",
          "columnsFrom": [
            "knowledge_base_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Knowledge base owners can view embed access logs": {
          "name": "Knowledge base owners can view embed access logs",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(\n        EXISTS (\n          SELECT 1 FROM knowledge_bases kb \n          WHERE kb.id = knowledge_base_id \n          AND kb.user_id = auth.uid()\n        )\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.embed_message_logs": {
      "name": "embed_message_logs",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "knowledge_base_id": {
          "name": "knowledge_base_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "chat_id": {
          "name": "chat_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "message": {
          "name": "message",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "timestamp": {
          "name": "timestamp",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "embed_message_logs_knowledge_base_id_knowledge_bases_id_fk": {
          "name": "embed_message_logs_knowledge_base_id_knowledge_bases_id_fk",
          "tableFrom": "embed_message_logs",
          "tableTo": "knowledge_bases",
          "columnsFrom": [
            "knowledge_base_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Knowledge base owners can view embed message logs": {
          "name": "Knowledge base owners can view embed message logs",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(\n        EXISTS (\n          SELECT 1 FROM knowledge_bases kb \n          WHERE kb.id = knowledge_base_id \n          AND kb.user_id = auth.uid()\n        )\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.knowledge_base_shares": {
      "name": "knowledge_base_shares",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "knowledge_base_id": {
          "name": "knowledge_base_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "shared_with_email": {
          "name": "shared_with_email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "shared_by_user_id": {
          "name": "shared_by_user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "knowledge_base_shares_knowledge_base_id_knowledge_bases_id_fk": {
          "name": "knowledge_base_shares_knowledge_base_id_knowledge_bases_id_fk",
          "tableFrom": "knowledge_base_shares",
          "tableTo": "knowledge_bases",
          "columnsFrom": [
            "knowledge_base_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "knowledge_base_shares_shared_by_user_id_users_id_fk": {
          "name": "knowledge_base_shares_shared_by_user_id_users_id_fk",
          "tableFrom": "knowledge_base_shares",
          "tableTo": "users",
          "columnsFrom": [
            "shared_by_user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_kb_email_share": {
          "name": "unique_kb_email_share",
          "nullsNotDistinct": false,
          "columns": [
            "knowledge_base_id",
            "shared_with_email"
          ]
        }
      },
      "policies": {
        "Users can view shares for their knowledge bases": {
          "name": "Users can view shares for their knowledge bases",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(\n        EXISTS (\n          SELECT 1 FROM knowledge_bases kb \n          WHERE kb.id = knowledge_base_id \n          AND kb.user_id = auth.uid()\n        )\n      )"
        },
        "Users can create shares for their knowledge bases": {
          "name": "Users can create shares for their knowledge bases",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "(\n        EXISTS (\n          SELECT 1 FROM knowledge_bases kb \n          WHERE kb.id = knowledge_base_id \n          AND kb.user_id = auth.uid()\n        )\n      )"
        },
        "Users can delete shares for their knowledge bases": {
          "name": "Users can delete shares for their knowledge bases",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "(\n        EXISTS (\n          SELECT 1 FROM knowledge_bases kb \n          WHERE kb.id = knowledge_base_id \n          AND kb.user_id = auth.uid()\n        )\n      )"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.knowledge_bases": {
      "name": "knowledge_bases",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "gen_random_uuid()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_public": {
          "name": "is_public",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "allow_embedding": {
          "name": "allow_embedding",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "document_ids": {
          "name": "document_ids",
          "type": "text[]",
          "primaryKey": false,
          "notNull": false
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        },
        "embed_config": {
          "name": "embed_config",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'{}'::jsonb"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "knowledge_bases_user_id_users_id_fk": {
          "name": "knowledge_bases_user_id_users_id_fk",
          "tableFrom": "knowledge_bases",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own knowledge bases": {
          "name": "Users can view their own knowledge bases",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Anyone can view public knowledge bases": {
          "name": "Anyone can view public knowledge bases",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(is_public = true)"
        },
        "Users can insert their own knowledge bases": {
          "name": "Users can insert their own knowledge bases",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "(auth.uid() = user_id)"
        },
        "Users can update their own knowledge bases": {
          "name": "Users can update their own knowledge bases",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Users can delete their own knowledge bases": {
          "name": "Users can delete their own knowledge bases",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.payments": {
      "name": "payments",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "subscription_id": {
          "name": "subscription_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_payment_intent_id": {
          "name": "stripe_payment_intent_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_invoice_id": {
          "name": "stripe_invoice_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "amount": {
          "name": "amount",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "currency": {
          "name": "currency",
          "type": "varchar(3)",
          "primaryKey": false,
          "notNull": true,
          "default": "'USD'"
        },
        "status": {
          "name": "status",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "payment_method": {
          "name": "payment_method",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "receipt_url": {
          "name": "receipt_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false,
          "default": "'{}'::jsonb"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "payments_user_id_users_id_fk": {
          "name": "payments_user_id_users_id_fk",
          "tableFrom": "payments",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "payments_subscription_id_subscriptions_id_fk": {
          "name": "payments_subscription_id_subscriptions_id_fk",
          "tableFrom": "payments",
          "tableTo": "subscriptions",
          "columnsFrom": [
            "subscription_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own payments": {
          "name": "Users can view their own payments",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.plans": {
      "name": "plans",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "name": {
          "name": "name",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "description": {
          "name": "description",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_price_id": {
          "name": "stripe_price_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "stripe_product_id": {
          "name": "stripe_product_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "type": {
          "name": "type",
          "type": "plan_type",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "price": {
          "name": "price",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "interval": {
          "name": "interval",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "features": {
          "name": "features",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "active": {
          "name": "active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "limits": {
          "name": "limits",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Anyone can view active plans": {
          "name": "Anyone can view active plans",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(active = true)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.subscriptions": {
      "name": "subscriptions",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "plan_id": {
          "name": "plan_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "stripe_subscription_id": {
          "name": "stripe_subscription_id",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "status": {
          "name": "status",
          "type": "subscription_status",
          "typeSchema": "public",
          "primaryKey": false,
          "notNull": true
        },
        "current_period_start": {
          "name": "current_period_start",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "current_period_end": {
          "name": "current_period_end",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true
        },
        "cancel_at_period_end": {
          "name": "cancel_at_period_end",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "canceled_at": {
          "name": "canceled_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "subscriptions_user_id_users_id_fk": {
          "name": "subscriptions_user_id_users_id_fk",
          "tableFrom": "subscriptions",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "subscriptions_plan_id_plans_id_fk": {
          "name": "subscriptions_plan_id_plans_id_fk",
          "tableFrom": "subscriptions",
          "tableTo": "plans",
          "columnsFrom": [
            "plan_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own subscriptions": {
          "name": "Users can view their own subscriptions",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.usage_records": {
      "name": "usage_records",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "subscription_id": {
          "name": "subscription_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": false
        },
        "category": {
          "name": "category",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "quantity": {
          "name": "quantity",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        },
        "recorded_at": {
          "name": "recorded_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "metadata": {
          "name": "metadata",
          "type": "jsonb",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "usage_records_user_id_users_id_fk": {
          "name": "usage_records_user_id_users_id_fk",
          "tableFrom": "usage_records",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "usage_records_subscription_id_subscriptions_id_fk": {
          "name": "usage_records_subscription_id_subscriptions_id_fk",
          "tableFrom": "usage_records",
          "tableTo": "subscriptions",
          "columnsFrom": [
            "subscription_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own usage records": {
          "name": "Users can view their own usage records",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_config": {
      "name": "user_config",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "auth.uid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "language_preference": {
          "name": "language_preference",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'en'"
        },
        "use_document": {
          "name": "use_document",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": false
        },
        "use_voice_mode": {
          "name": "use_voice_mode",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "theme_preference": {
          "name": "theme_preference",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "default": "'system'"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_config_id_fkey": {
          "name": "user_config_id_fkey",
          "tableFrom": "user_config",
          "tableTo": "users",
          "columnsFrom": [
            "id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {
        "Users can view their own config": {
          "name": "Users can view their own config",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = id)"
        },
        "Users can insert their own config": {
          "name": "Users can insert their own config",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "(auth.uid() = id)"
        },
        "Users can update their own config": {
          "name": "Users can update their own config",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = id)"
        },
        "Users can delete their own config": {
          "name": "Users can delete their own config",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.user_pinned_knowledge_bases": {
      "name": "user_pinned_knowledge_bases",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "uuid_generate_v4()"
        },
        "user_id": {
          "name": "user_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "knowledge_base_id": {
          "name": "knowledge_base_id",
          "type": "uuid",
          "primaryKey": false,
          "notNull": true
        },
        "pinned_at": {
          "name": "pinned_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false,
          "default": "timezone('utc'::text, now())"
        }
      },
      "indexes": {},
      "foreignKeys": {
        "user_pinned_knowledge_bases_user_id_users_id_fk": {
          "name": "user_pinned_knowledge_bases_user_id_users_id_fk",
          "tableFrom": "user_pinned_knowledge_bases",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        },
        "user_pinned_knowledge_bases_knowledge_base_id_knowledge_bases_id_fk": {
          "name": "user_pinned_knowledge_bases_knowledge_base_id_knowledge_bases_id_fk",
          "tableFrom": "user_pinned_knowledge_bases",
          "tableTo": "knowledge_bases",
          "columnsFrom": [
            "knowledge_base_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_user_kb_pin": {
          "name": "unique_user_kb_pin",
          "nullsNotDistinct": false,
          "columns": [
            "user_id",
            "knowledge_base_id"
          ]
        }
      },
      "policies": {
        "Users can view their own pins": {
          "name": "Users can view their own pins",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        },
        "Users can create their own pins": {
          "name": "Users can create their own pins",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "(auth.uid() = user_id)"
        },
        "Users can delete their own pins": {
          "name": "Users can delete their own pins",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = user_id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "uuid",
          "primaryKey": true,
          "notNull": true,
          "default": "auth.uid()"
        },
        "created_at": {
          "name": "created_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "updated_at": {
          "name": "updated_at",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": true,
          "default": "timezone('utc'::text, now())"
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "display_name": {
          "name": "display_name",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "avatar_url": {
          "name": "avatar_url",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "bio": {
          "name": "bio",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        },
        "is_active": {
          "name": "is_active",
          "type": "boolean",
          "primaryKey": false,
          "notNull": false,
          "default": true
        },
        "last_login": {
          "name": "last_login",
          "type": "timestamp with time zone",
          "primaryKey": false,
          "notNull": false
        },
        "stripe_customer_id": {
          "name": "stripe_customer_id",
          "type": "text",
          "primaryKey": false,
          "notNull": false
        }
      },
      "indexes": {},
      "foreignKeys": {
        "users_id_fkey": {
          "name": "users_id_fkey",
          "tableFrom": "users",
          "tableTo": "users",
          "columnsFrom": [
            "id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "cascade",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "unique_email": {
          "name": "unique_email",
          "nullsNotDistinct": false,
          "columns": [
            "email"
          ]
        }
      },
      "policies": {
        "Users can view their own profile": {
          "name": "Users can view their own profile",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = id)"
        },
        "Anyone can view public profile info": {
          "name": "Anyone can view public profile info",
          "as": "PERMISSIVE",
          "for": "SELECT",
          "to": [
            "public"
          ],
          "using": "true"
        },
        "Users can insert their own profile": {
          "name": "Users can insert their own profile",
          "as": "PERMISSIVE",
          "for": "INSERT",
          "to": [
            "public"
          ],
          "withCheck": "(auth.uid() = id)"
        },
        "Users can update their own profile": {
          "name": "Users can update their own profile",
          "as": "PERMISSIVE",
          "for": "UPDATE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = id)"
        },
        "Users can delete their own profile": {
          "name": "Users can delete their own profile",
          "as": "PERMISSIVE",
          "for": "DELETE",
          "to": [
            "public"
          ],
          "using": "(auth.uid() = id)"
        }
      },
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {
    "public.plan_type": {
      "name": "plan_type",
      "schema": "public",
      "values": [
        "free",
        "premium",
        "enterprise"
      ]
    },
    "public.subscription_status": {
      "name": "subscription_status",
      "schema": "public",
      "values": [
        "active",
        "canceled",
        "incomplete",
        "incomplete_expired",
        "past_due",
        "trialing",
        "unpaid"
      ]
    }
  },
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}